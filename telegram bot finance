import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_EXPENSE, ADD_INCOME, SET_BUDGET = range(3)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("finance_bot.db")
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance REAL DEFAULT 0,
            budget REAL
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            amount REAL,
            reason TEXT,
            date TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    """)

    conn.commit()
    conn.close()


init_db()


def get_db_connection():
    return sqlite3.connect("finance_bot.db")


def get_user_data(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT balance, budget FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if not result:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        balance, budget = 0, None
    else:
        balance, budget = result

    conn.close()
    return {"balance": balance, "budget": budget}


def add_transaction(user_id, trans_type, amount, reason):
    conn = get_db_connection()
    cursor = conn.cursor()

    if trans_type == "–î–æ—Ö–æ–¥":
        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    else:
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))

    cursor.execute("""
        INSERT INTO transactions (user_id, type, amount, reason)
        VALUES (?, ?, ?, ?)
    """, (user_id, trans_type, amount, reason))

    conn.commit()
    conn.close()


async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    get_user_data(user.id)

    keyboard = [
        [KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), KeyboardButton("üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç")],
        [KeyboardButton("üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


async def handle_buttons(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞—Å—Ö–æ–¥–∞:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –ü—Ä–æ–¥—É–∫—Ç—ã)",
            parse_mode="HTML"
        )
        return ADD_EXPENSE

    elif text == "üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        await update.message.reply_text(
            "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –ø—Ä–∏—á–∏–Ω—É –¥–æ—Ö–æ–¥–∞:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 30000 –ó–∞—Ä–ø–ª–∞—Ç–∞)",
            parse_mode="HTML"
        )
        return ADD_INCOME

    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)

    elif text == "üìä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç":
        await update.message.reply_text(
            "üìä –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞:",
            parse_mode="HTML"
        )
        return SET_BUDGET

    elif text == "üìã –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
        await show_all_transactions(update, context)

    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é":
        await delete_last_transaction(update, context)

    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await reset_data(update, context)

    return ConversationHandler.END


async def add_expense_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        parts = update.message.text.split(maxsplit=1)
        if len(parts) != 2:
            raise ValueError

        amount = float(parts[0])
        reason = parts[1]

        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return ADD_EXPENSE

        add_transaction(user_id, "–†–∞—Å—Ö–æ–¥", amount, reason)

        await update.message.reply_text(
            f"üí∏ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )

    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n500 –ü—Ä–æ–¥—É–∫—Ç—ã",
            parse_mode="HTML"
        )
        return ADD_EXPENSE

    return ConversationHandler.END


async def add_income_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        parts = update.message.text.split(maxsplit=1)
        if len(parts) != 2:
            raise ValueError

        amount = float(parts[0])
        reason = parts[1]

        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return ADD_INCOME

        add_transaction(user_id, "–î–æ—Ö–æ–¥", amount, reason)

        await update.message.reply_text(
            f"üíµ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            parse_mode="HTML"
        )

    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n30000 –ó–∞—Ä–ø–ª–∞—Ç–∞",
            parse_mode="HTML"
        )
        return ADD_INCOME

    return ConversationHandler.END


async def set_budget_handler(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        budget = float(update.message.text)

        if budget <= 0:
            await update.message.reply_text("–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return SET_BUDGET

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET budget = ? WHERE user_id = ?", (budget, user_id))
        conn.commit()
        conn.close()

        await update.message.reply_text(
            f"üìä –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {budget} ‚ÇΩ",
            parse_mode="HTML"
        )

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            parse_mode="HTML"
        )
        return SET_BUDGET

    return ConversationHandler.END


async def show_balance(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)

    message = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} ‚ÇΩ"

    if user_data['budget'] is not None:
        remaining = user_data['budget'] + user_data['balance']
        message += f"\nüìä –ë—é–¥–∂–µ—Ç: {user_data['budget']} ‚ÇΩ"
        message += f"\nüìå –û—Å—Ç–∞–ª–æ—Å—å: {remaining} ‚ÇΩ"

    await update.message.reply_text(message, parse_mode="HTML")


async def generate_transactions_chart(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    cursor.execute("""
        SELECT type, amount, date 
        FROM transactions 
        WHERE user_id = ? 
        ORDER BY date ASC
    """, (user_id,))
    transactions = cursor.fetchall()

    cursor.execute("SELECT budget FROM users WHERE user_id = ?", (user_id,))
    budget = cursor.fetchone()[0]
    conn.close()

    if not transactions:
        return None

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    dates = []
    incomes = []
    expenses = []
    balance_history = []
    current_balance = 0

    for t_type, amount, date in transactions:
        date_obj = datetime.strptime(date, "%Y-%m-%d %H:%M:%S")
        dates.append(date_obj)

        if t_type == "–î–æ—Ö–æ–¥":
            incomes.append(amount)
            expenses.append(0)
            current_balance += amount
        else:
            expenses.append(amount)
            incomes.append(0)
            current_balance -= amount

        balance_history.append(current_balance)

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 8))

    # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    plt.subplot(2, 1, 1)
    plt.bar(dates, incomes, color='green', alpha=0.6, label='–î–æ—Ö–æ–¥—ã')
    plt.bar(dates, [-e for e in expenses], color='red', alpha=0.6, label='–†–∞—Å—Ö–æ–¥—ã')
    plt.title('–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã')
    plt.ylabel('–°—É–º–º–∞ (‚ÇΩ)')
    plt.legend()
    plt.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
    plt.subplot(2, 1, 2)
    plt.plot(dates, balance_history, marker='o', color='blue', label='–ë–∞–ª–∞–Ω—Å')
    if budget is not None:
        plt.axhline(y=budget, color='orange', linestyle='--', label='–ë—é–¥–∂–µ—Ç')
    plt.title('–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–°—É–º–º–∞ (‚ÇΩ)')
    plt.legend()
    plt.grid(True)

    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=100)
    buf.seek(0)
    plt.close()

    return buf


async def show_all_transactions(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT type, amount, reason, strftime('%d.%m.%Y %H:%M:%S', date) as formatted_date 
        FROM transactions 
        WHERE user_id = ? 
        ORDER BY date DESC
    """, (user_id,))
    transactions = cursor.fetchall()
    conn.close()

    if not transactions:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    incomes = [t for t in transactions if t[0] == "–î–æ—Ö–æ–¥"]
    expenses = [t for t in transactions if t[0] == "–†–∞—Å—Ö–æ–¥"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
    if incomes:
        message = ["<b>üíµ –í—Å–µ –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã:</b>\n"]
        for idx, (_, amount, reason, date) in enumerate(incomes, 1):
            message.append(
                f"{idx}. <b>{amount} ‚ÇΩ</b>\n"
                f"   üìù <i>{reason}</i>\n"
                f"   üïí <code>{date}</code>\n"
            )
        for i in range(0, len(message), 5):
            await update.message.reply_text("\n".join(message[i:i + 5]), parse_mode="HTML")
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    if expenses:
        message = ["<b>üí∏ –í—Å–µ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:</b>\n"]
        for idx, (_, amount, reason, date) in enumerate(expenses, 1):
            message.append(
                f"{idx}. <b>{amount} ‚ÇΩ</b>\n"
                f"   üìù <i>{reason}</i>\n"
                f"   üïí <code>{date}</code>\n"
            )
        for i in range(0, len(message), 5):
            await update.message.reply_text("\n".join(message[i:i + 5]), parse_mode="HTML")
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart = await generate_transactions_chart(user_id)
    if chart:
        await update.message.reply_photo(
            photo=chart,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –±–∞–ª–∞–Ω—Å–∞",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")


async def delete_last_transaction(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, type, amount, reason, date 
        FROM transactions 
        WHERE user_id = ? 
        ORDER BY date DESC, id DESC 
        LIMIT 1
    """, (user_id,))
    transaction = cursor.fetchone()

    if transaction:
        trans_id, t_type, amount, reason, date = transaction
        cursor.execute("DELETE FROM transactions WHERE id = ?", (trans_id,))

        if t_type == "–î–æ—Ö–æ–¥":
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
        else:
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))

        conn.commit()
        await update.message.reply_text(
            f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n"
            f"{t_type}: {amount} ‚ÇΩ\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–î–∞—Ç–∞: {date}",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    conn.close()


async def reset_data(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("DELETE FROM transactions WHERE user_id = ?", (user_id,))
    cursor.execute("UPDATE users SET balance = 0, budget = NULL WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text("üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ë–∞–ª–∞–Ω—Å: 0 ‚ÇΩ")


def main():
    application = Application.builder().token("").build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons)],
        states={
            ADD_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_handler)],
            ADD_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_handler)],
            SET_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_budget_handler)],
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    async def error_handler(update: Update, context: CallbackContext):
        print(f"–û—à–∏–±–∫–∞: {context.error}")
        if update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    application.add_error_handler(error_handler)
    application.run_polling()


if __name__ == "__main__":
    main()
